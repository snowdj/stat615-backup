install.packages('np', dependencies = TRUE)
mydata <- read.dta("E:\\Dropbox\\book\\economics\\548\\paper\\data\\mysurvey_z_st2011.dta")
library(foreign)
mydata <- read.dta("E:\\Dropbox\\book\\economics\\548\\paper\\data\\mysurvey_z_st2011.dta")
header(mydata)
hist(mydata$_zlen)
View(mydata)
head(mydata)
zlen<-mydata$_zlen
mydata <- read.dta("E:\\Dropbox\\book\\economics\\548\\paper\\data\\mysurvey_z_st2011.dta")
mydata <- read.dta("E:\\Dropbox\\book\\economics\\548\\paper\\data\\mysurvey_z_st2011.dta")
zhei<-mydata$zhei
hist(zhei)
zwei<-mydata$zwei
hist(zwei)
zwfl<-mydata$zwfl
hist(zwfh)
mydata <- read.dta("E:\\Dropbox\\book\\economics\\548\\paper\\data\\mysurvey_z_st2011.dta")
hist(zwfl)
name(mydata)
names(mydata)
cdf(zlen)
install.packages("heR.Misc")
install.packages("CDFt")
help cdf
Czlen=ecdf(zlen)
mydata <- read.dta("E:\\Dropbox\\book\\economics\\548\\paper\\data\\mysurvey_z_st2011.dta")
zlen<-mydata$zlen
Czlen=ecdf(zlen)
Czlen(0.0)
plot(Czlen)
czwfl<-ecdf(zwfl)
plot(czwfl)
girl<-subset(mydata,gender==2)
boy<-subset(mydata,gender==1)
zleng<-girl$zlen
zlenb<-boy$zlen
fzleng<-ecdf(zleng)
Fzleng<-ecdf(zleng)
Fzlenb<-ecdf(zlenb)
dFzlen<-Fzleng-Fzlenb
plot(dFzlen)
summary Fzleng
plot(dFzleng)
plot(Fzleng)
install.packages("reldist")
reldist(Fzleng, Fzlenb)
library(reldist)
reldist(Fzleng, Fzlenb)
theta<- seq(0.68 , 0.93, 0.00001)
loss<-exp(theta)-theta-1
plot(theta,loss)
theta<- seq(-10.0 , 10.0, 0.00001)
loss<-exp(theta)-theta-1
plot(theta,loss)
plot(theta,loss,type="l", lwd=2, col="blue",xlim=(-10.0,10.0),xlab="Theta head", ylab="Loss function",main="ECON546 ASS3 Q3 LINEX")
loss<-exp(theta)-theta-1
theta<- seq(-10.0 , 10.0, 0.00001)
loss<-exp(theta)-theta-1
plot(theta,loss,type="l", lwd=2, col="blue",xlim=(-10.0,10.0),xlab="Theta head", ylab="Loss function",main="ECON546 ASS3 Q3 LINEX")
plot(theta,loss,type="l", lwd=2, col="blue",xlim=(-10.0,10.0),xlab="Theta head", ylab="Loss function",main="ECON546 ASS3 Q3 LINEX")
theta<- seq(-1.0 , 1.0, 0.00001)
loss<- exp(theta)-theta-1
plot(theta, loss, type="l", lwd=2, col="blue",xlab="Theta head/ theta normalized to 0", ylab="LINEX loss function", main="ECON546 ASS3 Q3")
theta<- seq(-10.0 , 10.0, 0.01)
loss<- exp(theta)-theta-1
plot(theta, loss, type="l", lwd=2, col="blue",xlab="Theta head/ theta normalized to 0", ylab="LINEX loss function", main="ECON546 ASS3 Q3")
theta<- seq(-5.0 , 10.0, 0.01)
loss<- exp(theta)-theta-1
plot(theta, loss, type="l", lwd=2, col="blue",xlab="Theta head/ theta normalized to 0", ylab="LINEX loss function", main="ECON546 ASS3 Q3")
theta<- seq(-5.0 , 5.0, 0.01)
loss<- exp(theta)-theta-1
plot(theta, loss, type="l", lwd=2, col="blue",xlab="Theta head/ theta normalized to 0", ylab="LINEX loss function", main="ECON546 ASS3 Q3")
theta<- seq(-2.0 , 2.0, 0.01)
loss<- exp(theta)-theta-1
plot(theta, loss, type="l", lwd=2, col="blue",xlab="Theta head/ theta normalized to 0", ylab="LINEX loss function", main="ECON546 ASS3 Q3")
install.packages("islr")
install.packages("ISLR")
library(ISLR)
attach(auto)
attach(Auto)
attach(Auto)
model = glm(mpg~horsepower, data = Auto)
MSE_LOOCV = cv.glm(Auto, model)
library(boot)
MSE_LOOCV = cv.glm(Auto, model)
MSE_LOOCV = cv.glm(Auto, model)
MSE_LOOCV$delta[1]
MSE_LOOCV = NULL
for(i in 1:10){
model = glm(mpg~poly(horsepower, i), data = Auto)
MSE_LOOCV[i] = cv.glm(Auto, model)$delta[1]
}
MSE_LOOCV
MSE_10_fold_cv = NULL
for(i in 1:10){
model = glm(mpg~poly(horsepower, i), data = Auto)
MSE_10_fold_cv[i] = cv.glm(Auto, model, K=10)$delta[1]
}
MSE_10_fold_cv
install.packages("knitr")
install.packages("KernSmooth")
library(kernsmooth)
library(KernSmooth)
find.package("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
find_rtools()
find_rtools()
library(devtools)
library(httpuv)
install.packages("httpuv")
library(jsonlite)
library(httpuv)
install.packages("httr")
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("githubapi", "89ea92391ec9ae70dd85", secret="12419ad207e60324e3228175bc9f8757b4ed0a82")
myapp <- oauth_app("github", "89ea92391ec9ae70dd85", secret="12419ad207e60324e3228175bc9f8757b4ed0a82")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json2[1,1:9]
json2[1,1:9]
names(json2)
names(json2$created_at)
names(json2$owner)
head(json2)
head(json2$created_at)
json2$created_at[ url == https://github.com/jtleek/datasharing ]
json2$created_at[ url == https:\\github.com\jtleek\datasharing]
names(json2$html_url)
created_at
head(json2$html_url)
json2$created_at[ html_url == "https://api.github.com/repos/jtleek/datasharing"]
json2$created_at[ json2$html_url == "https://api.github.com/repos/jtleek/datasharing"]
json2$created_at[json2$html_url == "https://api.github.com/repos/jtleek/datasharing"]
head(json2$created_at)
json2[json2$html_url == "https://api.github.com/repos/jtleek/datasharing"]
json2[,json2$html_url == "https://api.github.com/repos/jtleek/datasharing"]
json2[created_at,json2$html_url == "https://api.github.com/repos/jtleek/datasharing"]
json2$created_at
json2$created_at[json2$html_url == "https://api.github.com/repos/jtleek/datasharing"]
json2$created_at[json2$html_url == "https://github.com/jtleek/datasharing"]
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
? cat
head(iris)
iris2 <- fromJSON(myjson)
head(iris2)
myapp = oauth_app("twitter",key="RlSka6rY6I3g37WuWfzCTqQ6c",secret="EODcUw931DZzDPYAgrsx9Pnxj9otuWtSx5EuJ1GFPCxGArOzKw")
sig = sign_oauth1.0(myapp,token = " 276113007-MBWquEQ0XrdPMq415NkQoFxBLJpHnUJ6C9WKTBD0",token_secret = " S1g3XcnKOKLwg0M6T8r302LpJLxStHXE9YPRfdxHP6Yc0")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
jsonData$created_at[json2$html_url == "https://github.com/jtleek/datasharing"]
json11 = content(homeTL)
json21 = jsonlite::fromJSON(toJSON(json11))
json21[1,1:4]
json21[1,1:2]
names(json21)
head(json21)
head(json11)
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
myapp = oauth_app("twitter",key="RlSka6rY6I3g37WuWfzCTqQ6c",secret="EODcUw931DZzDPYAgrsx9Pnxj9otuWtSx5EuJ1GFPCxGArOzKw")
sig = sign_oauth1.0(myapp,token = "276113007-MBWquEQ0XrdPMq415NkQoFxBLJpHnUJ6C9WKTBD0",token_secret = "S1g3XcnKOKLwg0M6T8r302LpJLxStHXE9YPRfdxHP6Yc0")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json11 = content(homeTL)
json21 = jsonlite::fromJSON(toJSON(json11))
names(json21)
head(json11)
json21[1,1:2]
json21[1,1:4]
? qt()
12-4/10*(qt(0.95,99))
x =c(140,138,150,148,135)
y <- c(132,135,151,146,130)
t.test(x,y,paired = T)
mean + c(1,-1)*qt(0.975, 8)*sd/sqrt(n)
mean + c(-1,1)*qt(0.975, 8)*sd/sqrt(n)
n = 9
mean = 1100
sd = 33
t.test(x,y,paired = T)
se = sd/sqrt(n)
mean + c(-1,1)*qt(0.975, 8)*se
mean + c(-1,1)*qt(0.95, 8)*se
mean + c(-1,1)*qt(0.95, 8)*sd/sqrt(n)
pbinom (2,size=4,prob = 0.5)
choose(4, 3) * .5 ^ 3
choose(4, 3) * .5 ^ 3 + choose(4, 4) * .5 ^ 4
pbinom (2,size=4,prob = 0.5, lower.tail= F)
choose(4, 3) * .5 ^ 4 + choose(4, 4) * .5 ^ 4
choose(4, 3) * .5 ^ 4
binom.test(3,4, p = 0.5, alternative = "greater")
ppois(9, 5, lower.tail = FALSE)
ppois(10/1787, 1, lower.tail = FALSE)
10/1787
ppois(10, 17.87, lower.tail = FALSE)
ppois(9, 17.87, lower.tail = FALSE)
ppois(900, 1787, lower.tail = FALSE)
ppois(10/1787, 1, lower.tail = FALSE)
ppois(9, 17.87, lower.tail = FALSE)
sp <- sqrt((8 * 1.54^2 + 8 * 1.8^2) / (9 + 9 - 2))
sp <- sqrt((8 * 1.5^2 + 8 * 1.8^2) / (9 + 9 - 2))
pt((-3 - 1) /(sp * (1 / 8 + 1 / 21)^.5),9+9-2,lower.tail = F)
ppois(10, 17.87)
pt((-3 - 1) /(sp * (1 / 8 + 1 / 21)^.5), 9+9-2)
2*pt((-3 - 1) /(sp * (1 / 8 + 1 / 21)^.5), 9+9-2)
? poisson.test()
poisson.test(10, T = 1 , r = 17.87, alternative = "less")
2*pt((-3 - 1) /(sp * (1 / 8 + 1 / 21)^.5), 9+9-2)
qnorm(0.95)
pnorm(qnorm(0.95)-(0.01*10/0.04), lower.tail = F)
power.t.test(power = .9, delta = 0.01, sd=0.04, type = "one.sample", alt = "one.sided")$n
pnorm((44-40.04)/(12*sqrt(2/288)))
pnorm((44-42.04)/(12*sqrt(2/288)))
2*pnorm((44-42.04)/(12*sqrt(2/288)), lower.tail = F)
mean + c(-1,1)*qt(0.975, 8)*sd/sqrt(n)
n = 9
mean = 1100
sd = 30
mean + c(-1,1)*qt(0.975, 8)*sd/sqrt(n)
binom.test(3,4, p = 0.5, alternative = "greater")
poisson.test(10, T = 1 , r = 17.87, alternative = "less")
qnorm(0.95)
pnorm(qnorm(0.95)-(0.01*10/0.04), lower.tail = F)
2*pnorm((44-42.04)/(12*sqrt(2/288)), lower.tail = F)
power.t.test(power = .9, delta = 0.01, sd=0.04, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .9, delta = -0.01, sd=0.04, type = "one.sample", alt = "one.sided")$n
qnorm(0.95)
qnorm(0.90)
((qnorm(0.95)-qnorm(0.90))*4)^2
qnorm(0.8)
qnorm(0.90)
qnorm(0.90, lower.tail = F)
qnorm(0.95)-(0.01*10/0.04)
((qnorm(0.95)-qnorm(0.10))*4)^2
power.t.test(n = 100, delta=.01 , sd=.04 , type = “one.sample”, alt= “one.sided”)$power
power.t.test(n = 100, delta=0.01 , sd=0.04 , type = “one.sample”, alt= “one.sided”)$power
power.t.test(n = 100, delta=0.01 , sd=0.04 , type = "one.sample", alt= "one.sided")$power
yield<-read.csv("../yield.csv", skip =2,  header = T, sep = ",")
setwd("E:/Dropbox/book/economics/485/projects/nlfarm/finalcode/slides")
yield<-read.csv("../yield.csv", skip =2,  header = T, sep = ",")
yield <- yield[-1, c(1:5,7)]
names(yield)[c(4,6)]<-c("Flax","Wheat")
yield<-yield[,c("date","Wheat","Oats","Barley","Flax","Canola")]
meanyield <- apply(yield[19:23,-1],2, mean)
meanyield <- t(as.data.frame(meanyield))
sdDtrend <- function(x) sd(decomp(x, FALSE)$remainder)
sdyld <- apply(yield[,-1],2, function(x) sdDtrend(x))
library(forecast)
source("decomp.r")
source("decomp.r")
sdDtrend <- function(x) sd(decomp(x, FALSE)$remainder)
sdyld <- apply(yield[,-1],2, function(x) sdDtrend(x))
library("mgcv", lib.loc="D:/Program Files/R-3.0.3/library")
install.packages("mgcv")
install.packages("mgcv")
library(mgcv)
sdyld <- apply(yield[,-1],2, function(x) sdDtrend(x))
meanyld <- apply(yield[19:23,-1],2, mean)
Detrendsd <- sdyld
Detrendsd <- t(as.data.frame(Detrendsd))
library(ggplot2)
simYld<-read.csv("../simYld.csv")
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax"))  + geom_line(aes(y = simYld$Canola, colour = "Canola"))+ labs(title="simulated Yield", x= "State", y="Price") + theme(legend.title=element_blank())
ggplot(simYld, aes(x=1:nrow(simYld))) + geom_line(aes(y = simYld$Wheat, colour = "Wheat")) +  geom_line(aes(y = simYld$Barley, colour = "Barley"))+ geom_line(aes(y = simYld$Oats, colour = "Oats")) + geom_line(aes(y = simYld$Flax, colour = "Flax"))  + geom_line(aes(y = simYld$Canola, colour = "Canola"))+ labs(title="Simulated Yield", x= "State", y="Price") + theme(legend.title=element_blank())
simPr<-read.csv("../simPr.csv")
ggplot(simPr, aes(x=1:nrow(simPr))) + geom_line(aes(y = simPr$Wheat, colour = "Wheat")) +  geom_line(aes(y = simPr$Barley, colour = "Barley"))+ geom_line(aes(y = simPr$Oats, colour = "Oats")) + geom_line(aes(y = simPr$Flax, colour = "Flax")) + geom_line(aes(y = simPr$Canola, colour = "Canola"))+ labs(title="Simulated Price", x= "State", y="Price")+ theme(legend.title=element_blank())
